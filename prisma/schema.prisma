// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  admin
  operator
  user
}

enum Borrow_Status {
  pending_borrow
  pending_return
  confirmed_borrow
  confirmed_return
  confirmed_lost
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  address       String
  role          Role      @default(user)
  Borrows Borrow[]
  borrowed_books      Borrow[] @relation("confirmed_borrow")
  returned_books      Borrow[] @relation("confirmed_return")
  deleted_at    DateTime?
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  books   BookCategory[]
}

model Book {
  id            String    @id @default(cuid())
  title         String    @unique
  cover         String?
  author        String
  stock         Int       @default(0)
  publisher     String
  published_at  DateTime
  categories    BookCategory[]
  borrows       Borrow[]
}

model BookCategory {
  id         String @id @default(cuid())
  book       Book   @relation(fields: [bookId], references: [id],onDelete: Cascade)
  bookId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@unique([bookId, categoryId], name: "unique_book_category")
}

model Borrow {
  id            String @id @default(cuid())
  user          User @relation(fields: [userId], references: [id])
  userId        String
  book          Book @relation(fields: [bookId], references: [id])
  bookId        String
  amount        Int
  status        Borrow_Status @default(pending_borrow)
  borrowed_at   DateTime
  return_schedule DateTime
  fine  Int @default(0)
  confirmed_borrow User? @relation("confirmed_borrow", fields: [confirmed_borrow_by], references: [id])
  confirmed_borrow_by String?
  returned_at   DateTime?
  confirmed_return User? @relation("confirmed_return", fields: [confirmed_return_by], references: [id])
  confirmed_return_by String?
}